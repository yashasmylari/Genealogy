


Person {
	String name;
	String gender;
	String firstName;
	String lastName;
	String dateOfBirth;
	String placeOfBirth;
	Boolean isAlive;
	String dateOfDeath;
	String region;
	String language;
	String religion;
	String clan;
	String ethinicity;
	String occupation;
	String physicalTraits;
	String education;
	String medicalCondition;
	String specialCharacteristic;
}



// Working on REGION to make a node connecting to the Person node as per Barabara's Suggestion


// User Story #1 (Vivek)
// Done Using API need to confirm whether it is Ok




// User Story #2 (Sanjana AND Aloka)
MATCH (p1:Person {name: "Jack"}), (p2:Person {name: "Jane"}),
      path = shortestpath((p1)-[:RELATED_TO*]-(p2))
RETURN path




// User Story #3 (Yashaa AND Shraddha)
MATCH (p1:Person{name: "Rita"}), (p2:Person{medicalCondition: "Asthma"}),
      path =(p1)-[:RELATED_TO*]-(p2)
RETURN path


// User Story #3 (Relation Specific)
MATCH (p1:Person{name: "Rita"}), (p2:Person{medicalCondition: "Asthma"}),
      path =(p1)-[:FATHER_OF | MOTHER_OF *]-(p2)
RETURN path


// User Story #3 (Not Relation Specific - Node Level Defined)
MATCH (k)-[r*1..3]-(l)
WHERE k.name = "Rita" AND l.medicalCondition = "Asthma"
RETURN k,r,l


// User Story #3 (Relation Specific - Node Level Defined)
MATCH (k)-[r:FATHER_OF | MOTHER_OF *1..3]-(l)
WHERE k.name = "Rita" AND l.medicalCondition = "Asthma"
RETURN k,r,l


// User Story #4 
// In Progres


// User Story #5


