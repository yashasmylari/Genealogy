


Person {
	String name;
	String gender;
	String firstName;
	String lastName;
	String dateOfBirth;
	String placeOfBirth;
	Boolean isAlive;
	String dateOfDeath;
	String imageUrl;
	String imageData;
	String residence;
	String nationality;
	String religion;
	String clan;
	String ethnicity;
	String occupation;
	String education;
	String[] locations;
	String[] languages;
	String[] physicalTraits;
	String[] medicalCondition;
	String[] specialCharacteristic;
}



// Working on REGION to make a node connecting to the Person node as per Barabara's Suggestion


// User Story #1 (Vivek)
MATCH (n:Person{name:"Leshya Singh"}) SET n.residence = "Toronto,Canada" RETURN n.residence




// User Story #2
MATCH (p1:Person {name: "Roy"}), (p2:Person {name: "Hugh"}),
path = allShortestPaths((p1)-[:FATHER_OF | :MOTHER_OF |:MARRIED_TO *]-(p2))
RETURN path




// User Story #3
MATCH (k:Person)-[r:FATHER_OF | MOTHER_OF *1..7 ]-(l:Person)
WHERE k.name = "Rita" AND SINGLE(x IN l.medicalCondition WHERE x = "Asthma")
RETURN k,r,l




// User Story #4 
MATCH path = shortestpath((k:Person)-[r:FATHER_OF | MOTHER_OF ]-(l:Person))
WHERE k.name = "Jason Smith" AND NOT l.name ="Jason Smith" AND
	ANY (x IN l.locations WHERE x =~ ".*Employment.*" AND x =~ ".*Heidelberg.*"  )
RETURN path, l.name, l.locations





// User Story #5

// Sub Story 1
MATCH (n:Person)
WHERE n.religion = "Sikh" AND n.clan = "Singh" AND n.residence =~ ".*Heidelberg.*"
RETURN n.name, n.residence


// Sub Story 4
// Written in MongoDb


// Sub Story 3
// >> Mother's Side >> Angelina >> Till 2 Generations
// >> Father's Side >> Greg >> Till 3 Generations
MATCH (p1:Person), (p2:Person {name: "Hugh"}),
path = shortestpath((p1)-[:FATHER_OF | :MOTHER_OF *1..10]-(p2))
WHERE p1.name = "Angelina" OR p1.name = "Greg"
RETURN path

