


Person {
	String name;
	String gender;
	String firstName;
	String lastName;
	String dateOfBirth;
	String placeOfBirth;
	Boolean isAlive;
	String dateOfDeath;
	String imageUrl;
	String imageData;
	String residence;
	String nationality;
	String religion;
	String clan;
	String ethnicity;
	String occupation;
	String education;
	String[] locations;
	String[] languages;
	String[] physicalTraits;
	String[] medicalCondition;
	String[] specialCharacteristic;
}



// Working on REGION to make a node connecting to the Person node as per Barabara's Suggestion


// User Story #1 (Vivek)
// View - Created
MATCH (p:Person) WHERE p.lastName="Singh" OR p.lastName="Kaur" RETURN p

// Update
MATCH (n:Person{name:"Leshya Singh"}) SET n.residence = "Toronto,Canada" RETURN n.residence




// User Story #2
MATCH (p1:Person {name: "Roy"}), (p2:Person {name: "Hugh"}),
path = allShortestPaths((p1)-[:FATHER_OF | :MOTHER_OF |:MARRIED_TO *]-(p2))
RETURN path




// User Story #3
// The query is able to bring all the person in the family affected from
// the Asthma Medical Condition within the family tree. If there is 
// one or multiple missing link/person node without the medical,
// those nodes are also fetched by the respective query.
MATCH (k:Person)-[r:FATHER_OF | MOTHER_OF *1..7 ]-(l:Person)
WHERE k.name = "Rita" AND SINGLE(x IN l.medicalCondition WHERE x = "Asthma")
RETURN k,r,l




// User Story #4 
MATCH path = shortestpath((k:Person)-[r:FATHER_OF | MOTHER_OF ]-(l:Person))
WHERE k.name = "Jason Smith" AND NOT l.name ="Jason Smith" AND
	ANY (x IN l.locations WHERE x =~ ".*Employment.*" AND x =~ ".*Heidelberg.*"  )
RETURN path, l.name, l.locations





// User Story #5

// Sub Story 1
MATCH (n:Person)
WHERE n.religion = "Sikh" AND n.clan = "Singh" AND n.residence =~ ".*Heidelberg.*"
RETURN n.name, n.residence


/* ******************** SUB STORY 2 ******************** */

// Finding relation between the people 
// with similar physical traits and trying to find the common things among them


// Creates a relationship between the 'Person' nodes with similar physical traits
MATCH
  (p1:Person), (p2:Person)
WHERE 
  id(p1) > id(p2) 
  AND ALL (phy in p1.physicalTraits WHERE phy IN p2.physicalTraits)
CREATE
  (p1)-[r1:SIMILAR_PHSYICAL_TRAIT]->(p2) , (p2)-[r2:SIMILAR_PHSYICAL_TRAIT]->(p1)
RETURN
  p1, r1, r2, p2


// It matches the properties and goes until common values
MATCH
  (p:Person{name:"Marie Kennedy"}),
  (p)-[r2:SIMILAR_PHSYICAL_TRAIT]->(p1:Person),
  path = (p1) - [r:MOTHER_OF | :FATHER_OF *1..6] - (p2:Person)
WHERE
  p.lastName = p1.lastName
  OR p.lastName = p2.lastName
  OR  p.placeOfBirth = p1.placeOfBirth
  OR  p.placeOfBirth = p2.placeOfBirth
  OR  p.education CONTAINS p1.education
  OR  p1.education CONTAINS p.education
  OR  p.education CONTAINS p2.education
  OR  p2.education CONTAINS p.education
  OR  p.occupation CONTAINS p1.occupation
  OR  p1.occupation CONTAINS p.occupation
  OR  p.occupation CONTAINS p2.occupation
  OR  p2.occupation CONTAINS p.occupation
RETURN
  p, p1, r, p2,
  p.lastName, p1.lastName, p2.lastName,
  p.placeOfBirth, p1.placeOfBirth, p2.placeOfBirth,
  p.education, p1.education,  p2.education,
  p.occupation, p1.occupation, p2.occupation
;



// Sub Story 3
// >> Mother's Side >> Angelina >> Till 2 Generations
// >> Father's Side >> Greg >> Till 3 Generations
MATCH (p1:Person), (p2:Person {name: "Hugh"}),
path = shortestpath((p1)-[:FATHER_OF | :MOTHER_OF *1..10]-(p2))
WHERE p1.name = "Angelina" OR p1.name = "Greg"
RETURN path

